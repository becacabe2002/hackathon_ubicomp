{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -944,
        368
      ],
      "id": "6f176318-447b-4f07-a18a-e6dd931d422f",
      "name": "Webhook",
      "webhookId": "2876839b-258a-49cb-8b9a-498fefea3666"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1312,
        432
      ],
      "id": "b52e52e2-a8c6-43da-bb94-5e995a0d8302",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8e6ad1f8-7662-4491-90fa-7452e73e2bd8",
              "leftValue": "={{ $json.interpret.decision }}",
              "rightValue": "allow_with_transform",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -240,
        368
      ],
      "id": "5f0f2341-0bab-4dc7-a8d7-3db936d01cb3",
      "name": "If"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Convert this question and result into natural language response:\n* Question: {{ $json.anonymized_text }}\n* Result: {{ $json.result_string }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        592,
        32
      ],
      "id": "840fc48d-5d33-4c98-9c4d-c653f5fe1ff6",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "ceDeUr4OYYFqUiVZ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://backend:8000/analyze",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"text\": \"{{ $json.body.text }}\"}",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -688,
        240
      ],
      "id": "9b4e80cd-0dbf-44cc-b71c-d2324a19826d",
      "name": "analyze"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://backend:8000/test_interpret",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"text\" : \"{{ $json.anonymized_text }}\"}",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -496,
        368
      ],
      "id": "c6d106a9-4514-4a53-9b22-0edecc0cfced",
      "name": "interpret"
    },
    {
      "parameters": {
        "url": "http://backend:8000/natural_sql_service/current-search-result",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        176
      ],
      "id": "d2358c5c-a130-4b3b-b727-58e23aabef27",
      "name": "Get Search Data"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://backend:8000/natural_sql_service/natural-language-query",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $('analyze').item.json.anonymized_text }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -16,
        176
      ],
      "id": "b240df1c-8042-4128-a229-19bd77ddb591",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        944,
        416
      ],
      "id": "1d1c9a2e-f9df-4106-aca3-eed52c8f0002",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "let result_string = \"\"\n$input.all().forEach(x => {\n              const temp = JSON.stringify(x.json)\n              console.log(temp)\n              result_string = result_string + \" \" + temp\n            })\nreturn [\n\t{\n    \tjson: {\n      \t\tresult_string: result_string\n    \t}\n    }\n  ];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        256
      ],
      "id": "24063fe4-3e69-422c-8cf7-5f31a46d477c",
      "name": "Code in JavaScript"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "analyze",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "analyze": {
      "main": [
        [
          {
            "node": "interpret",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "interpret": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Get Search Data": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Get Search Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7f37c026-484a-4ff6-ab9d-cd3d6443733a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3e447e2e6d577e0df42a7acf0a1ee67bcf83ccf20dc1776f1292864d92512dca"
  },
  "id": "123",
  "tags": []
}
